Testing SeaHag actions.
File 'dominion.c'
Lines executed:16.61% of 566
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:55
        -:    0:Programs:12
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
  1202700:    8:int compare(const void* a, const void* b) {
  1202700:    9:  if (*(int*)a > *(int*)b)
    #####:   10:    return 1;
  1202700:   11:  if (*(int*)a < *(int*)b)
   320720:   12:    return -1;
   881980:   13:  return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
    20045:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
    20045:   44:  SelectStream(1);
    20045:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
    20045:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
    20045:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
   220495:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
  2204950:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
  2004500:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
    20045:   73:  if (numPlayers == 2)
        -:   74:    {
    #####:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
    20045:   77:  else if (numPlayers == 3)
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    20045:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
    20045:   87:  if (numPlayers == 2)
        -:   88:    {
    #####:   89:      state->supplyCount[estate] = 8;
    #####:   90:      state->supplyCount[duchy] = 8;
    #####:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
    20045:   95:      state->supplyCount[estate] = 12;
    20045:   96:      state->supplyCount[duchy] = 12;
    20045:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
    20045:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
    20045:  102:  state->supplyCount[silver] = 40;
    20045:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
   420945:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
  3307425:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
  3106975:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
   200450:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
    80180:  115:		  if (numPlayers == 2){ 
    #####:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
    40090:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
   160360:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
   200450:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
  2906525:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
   100225:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
    80180:  140:      state->deckCount[i] = 0;
   320720:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
   240540:  143:	  state->deck[i][j] = estate;
   240540:  144:	  state->deckCount[i]++;
        -:  145:	}
   641440:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
   561260:  148:	  state->deck[i][j] = copper;
   561260:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
   100225:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
    80180:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
   100225:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
    80180:  166:      state->handCount[i] = 0;
    80180:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
   561260:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
   541215:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
    20045:  182:  state->outpostPlayed = 0;
    20045:  183:  state->phase = 0;
    20045:  184:  state->numActions = 1;
    20045:  185:  state->numBuys = 1;
    20045:  186:  state->playedCardCount = 0;
    20045:  187:  state->whoseTurn = 0;
    20045:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
   120270:  192:  for (it = 0; it < 5; it++){
   100225:  193:    drawCard(state->whoseTurn, state);
        -:  194:  }
        -:  195:
    20045:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
    20045:  198:  return 0;
        -:  199:}
        -:  200:
    80180:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
    80180:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
    80180:  209:  if (state->deckCount[player] < 1)
    #####:  210:    return -1;
    80180:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
   962160:  214:  while (state->deckCount[player] > 0) {
   801800:  215:    card = floor(Random() * state->deckCount[player]);
   801800:  216:    newDeck[newDeckPos] = state->deck[player][card];
   801800:  217:    newDeckPos++;
  2365310:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
  1563510:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
   801800:  221:    state->deckCount[player]--;
        -:  222:  }
   881980:  223:  for (i = 0; i < newDeckPos; i++) {
   801800:  224:    state->deck[player][i] = newDeck[i];
   801800:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
    80180:  228:  return 0;
        -:  229:}
        -:  230:
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
       11:  311:int numHandCards(struct gameState *state) {
       11:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i, j;
    #####:  326:  int count = 0;
        -:  327:
        -:  328:	// making changes to count all card types in the deck
    #####:  329:	for (j=0; j<27; j++) {
    #####:  330:		card = j;
        -:  331:
    #####:  332:  for (i = 0; i < state->deckCount[player]; i++)
        -:  333:    {
    #####:  334:      if (state->deck[player][i] == card) count++;
        -:  335:    }
        -:  336:
    #####:  337:  for (i = 0; i < state->handCount[player]; i++)
        -:  338:    {
    #####:  339:      if (state->hand[player][i] == card) count++;
        -:  340:    }
        -:  341:
    #####:  342:  for (i = 0; i < state->discardCount[player]; i++)
        -:  343:    {
    #####:  344:      if (state->discard[player][i] == card) count++;
        -:  345:    }
        -:  346:	}
    #####:  347:  return count;
        -:  348:}
        -:  349:
    20011:  350:int whoseTurn(struct gameState *state) {
    20011:  351:  return state->whoseTurn;
        -:  352:}
        -:  353:
    #####:  354:int endTurn(struct gameState *state) {
        -:  355:  int k;
        -:  356:  int i;
    #####:  357:  int currentPlayer = whoseTurn(state);
        -:  358:  
        -:  359:  //Discard hand
    #####:  360:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  361:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  362:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  363:  }
    #####:  364:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  365:    
        -:  366:  //Code for determining the player
    #####:  367:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  368:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  369:  }
        -:  370:  else{
    #####:  371:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  372:  }
        -:  373:
    #####:  374:  state->outpostPlayed = 0;
    #####:  375:  state->phase = 0;
    #####:  376:  state->numActions = 1;
    #####:  377:  state->coins = 0;
    #####:  378:  state->numBuys = 1;
    #####:  379:  state->playedCardCount = 0;
    #####:  380:  state->handCount[state->whoseTurn] = 0;
        -:  381:
        -:  382:  //int k; move to top
        -:  383:  //Next player draws hand
    #####:  384:  for (k = 0; k < 5; k++){
    #####:  385:    drawCard(state->whoseTurn, state);//Draw a card
        -:  386:  }
        -:  387:
        -:  388:  //Update money
    #####:  389:  updateCoins(state->whoseTurn, state , 0);
        -:  390:
    #####:  391:  return 0;
        -:  392:}
        -:  393:
    #####:  394:int isGameOver(struct gameState *state) {
        -:  395:  int i;
        -:  396:  int j;
        -:  397:	
        -:  398:  //if stack of Province cards is empty, the game ends
    #####:  399:  if (state->supplyCount[province] == 0)
        -:  400:    {
    #####:  401:      return 1;
        -:  402:    }
        -:  403:
        -:  404:  //if three supply pile are at 0, the game ends
    #####:  405:  j = 0;
    #####:  406:  for (i = 0; i < 25; i++)
        -:  407:    {
    #####:  408:      if (state->supplyCount[i] == 0)
        -:  409:	{
    #####:  410:	  j++;
        -:  411:	}
        -:  412:    }
    #####:  413:  if ( j >= 3)
        -:  414:    {
    #####:  415:      return 1;
        -:  416:    }
        -:  417:
    #####:  418:  return 0;
        -:  419:}
        -:  420:
    #####:  421:int scoreFor (int player, struct gameState *state) {
        -:  422:
        -:  423:  int i;
    #####:  424:  int score = 0;
        -:  425:  //score from hand
    #####:  426:  for (i = 0; i < state->handCount[player]; i++)
        -:  427:    {
    #####:  428:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  429:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  430:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  431:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  432:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  433:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  434:    }
        -:  435:
        -:  436:  //score from discard
    #####:  437:  for (i = 0; i < state->discardCount[player]; i++)
        -:  438:    {
    #####:  439:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  440:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  441:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  442:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  443:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  444:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  445:    }
        -:  446:
        -:  447:  //score from deck
    #####:  448:  for (i = 0; i < state->deckCount[player]; i++)
        -:  449:    {
    #####:  450:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  451:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  452:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  453:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  454:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  455:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  456:    }
        -:  457:
    #####:  458:  return score;
        -:  459:}
        -:  460:
    #####:  461:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  462:  int i;	
        -:  463:  int j;
        -:  464:  int highScore;
        -:  465:  int currentPlayer;
        -:  466:
        -:  467:  //get score for each player
    #####:  468:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  469:    {
        -:  470:      //set unused player scores to -9999
    #####:  471:      if (i >= state->numPlayers)
        -:  472:	{
    #####:  473:	  players[i] = -9999;
        -:  474:	}
        -:  475:      else
        -:  476:	{
    #####:  477:	  players[i] = scoreFor (i, state);
        -:  478:	}
        -:  479:    }
        -:  480:
        -:  481:  //find highest score
    #####:  482:  j = 0;
    #####:  483:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  484:    {
    #####:  485:      if (players[i] > players[j])
        -:  486:	{
    #####:  487:	  j = i;
        -:  488:	}
        -:  489:    }
    #####:  490:  highScore = players[j];
        -:  491:
        -:  492:  //add 1 to players who had less turns
    #####:  493:  currentPlayer = whoseTurn(state);
    #####:  494:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  495:    {
    #####:  496:      if ( players[i] == highScore && i > currentPlayer )
        -:  497:	{
    #####:  498:	  players[i]++;
        -:  499:	}
        -:  500:    }
        -:  501:
        -:  502:  //find new highest score
    #####:  503:  j = 0;
    #####:  504:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  505:    {
    #####:  506:      if ( players[i] > players[j] )
        -:  507:	{
    #####:  508:	  j = i;
        -:  509:	}
        -:  510:    }
    #####:  511:  highScore = players[j];
        -:  512:
        -:  513:  //set winners in array to 1 and rest to 0
    #####:  514:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  515:    {
    #####:  516:      if ( players[i] == highScore )
        -:  517:	{
    #####:  518:	  players[i] = 1;
        -:  519:	}
        -:  520:      else
        -:  521:	{
    #####:  522:	  players[i] = 0;
        -:  523:	}
        -:  524:    }
        -:  525:
    #####:  526:  return 0;
        -:  527:}
        -:  528:
   100225:  529:int drawCard(int player, struct gameState *state)
        -:  530:{	int count;
        -:  531:  int deckCounter;
   100225:  532:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  533:    
        -:  534:    //Step 1 Shuffle the discard pile back into a deck
        -:  535:    int i;
        -:  536:    //Move discard to deck
    #####:  537:    for (i = 0; i < state->discardCount[player];i++){
    #####:  538:      state->deck[player][i] = state->discard[player][i];
    #####:  539:      state->discard[player][i] = -1;
        -:  540:    }
        -:  541:
    #####:  542:    state->deckCount[player] = state->discardCount[player];
    #####:  543:    state->discardCount[player] = 0;//Reset discard
        -:  544:
        -:  545:    //Shufffle the deck
    #####:  546:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  547:   
        -:  548:    if (DEBUG){//Debug statements
        -:  549:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  550:    }
        -:  551:    
    #####:  552:    state->discardCount[player] = 0;
        -:  553:
        -:  554:    //Step 2 Draw Card
    #####:  555:    count = state->handCount[player];//Get current player's hand count
        -:  556:    
        -:  557:    if (DEBUG){//Debug statements
        -:  558:      printf("Current hand count: %d\n", count);
        -:  559:    }
        -:  560:    
    #####:  561:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  562:
    #####:  563:    if (deckCounter == 0)
    #####:  564:      return -1;
        -:  565:
    #####:  566:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  567:    state->deckCount[player]--;
    #####:  568:    state->handCount[player]++;//Increment hand count
        -:  569:  }
        -:  570:
        -:  571:  else{
   100225:  572:    int count = state->handCount[player];//Get current hand count for player
        -:  573:    int deckCounter;
        -:  574:    if (DEBUG){//Debug statements
        -:  575:      printf("Current hand count: %d\n", count);
        -:  576:    }
        -:  577:
   100225:  578:    deckCounter = state->deckCount[player];//Create holder for the deck count
   100225:  579:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
   100225:  580:    state->deckCount[player]--;
   100225:  581:    state->handCount[player]++;//Increment hand count
        -:  582:  }
        -:  583:
   100225:  584:  return 0;
        -:  585:}
        -:  586:
    #####:  587:int getCost(int cardNumber)
        -:  588:{
    #####:  589:  switch( cardNumber ) 
        -:  590:    {
        -:  591:    case curse:
    #####:  592:      return 0;
        -:  593:    case estate:
    #####:  594:      return 2;
        -:  595:    case duchy:
    #####:  596:      return 5;
        -:  597:    case province:
    #####:  598:      return 8;
        -:  599:    case copper:
    #####:  600:      return 0;
        -:  601:    case silver:
    #####:  602:      return 3;
        -:  603:    case gold:
    #####:  604:      return 6;
        -:  605:    case adventurer:
    #####:  606:      return 6;
        -:  607:    case council_room:
    #####:  608:      return 5;
        -:  609:    case feast:
    #####:  610:      return 4;
        -:  611:    case gardens:
    #####:  612:      return 4;
        -:  613:    case mine:
    #####:  614:      return 5;
        -:  615:    case remodel:
    #####:  616:      return 4;
        -:  617:    case smithy:
    #####:  618:      return 4;
        -:  619:    case village:
    #####:  620:      return 3;
        -:  621:    case baron:
    #####:  622:      return 4;
        -:  623:    case great_hall:
    #####:  624:      return 3;
        -:  625:    case minion:
    #####:  626:      return 5;
        -:  627:    case steward:
    #####:  628:      return 3;
        -:  629:    case tribute:
    #####:  630:      return 5;
        -:  631:    case ambassador:
    #####:  632:      return 3;
        -:  633:    case cutpurse:
    #####:  634:      return 4;
        -:  635:    case embargo: 
    #####:  636:      return 2;
        -:  637:    case outpost:
    #####:  638:      return 5;
        -:  639:    case salvager:
    #####:  640:      return 4;
        -:  641:    case sea_hag:
    #####:  642:      return 4;
        -:  643:    case treasure_map:
    #####:  644:      return 4;
        -:  645:    }
        -:  646:	
    #####:  647:  return -1;
        -:  648:}
        -:  649:
    #####:  650:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  651:{
        -:  652:  int i;
        -:  653:  int j;
        -:  654:  int k;
        -:  655:  int x;
        -:  656:  int index;
    #####:  657:  int currentPlayer = whoseTurn(state);
    #####:  658:  int nextPlayer = currentPlayer + 1;
        -:  659:
    #####:  660:  int tributeRevealedCards[2] = {-1, -1};
        -:  661:  int temphand[MAX_HAND];// moved above the if statement
    #####:  662:  int drawntreasure=0;
        -:  663:  int cardDrawn;
    #####:  664:  int z = 0;// this is the counter for the temp hand
    #####:  665:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  666:    nextPlayer = 0;
        -:  667:  }
        -:  668:  
        -:  669:	
        -:  670:  //uses switch to select card and perform actions
    #####:  671:  switch( card ) 
        -:  672:    {
        -:  673:    case adventurer:
    #####:  674:    	play_adventurer(currentPlayer, drawntreasure, cardDrawn, temphand, state);
    #####:  675:    	return 0;
        -:  676:			
        -:  677:    case council_room:
    #####:  678:    	play_council_room(currentPlayer, state, handPos);
    #####:  679:        return 0;
        -:  680:
        -:  681:    case smithy:
    #####:  682:    	play_smithy(currentPlayer, state, handPos);
    #####:  683:    	return 0;
        -:  684:
        -:  685:    case village:
    #####:  686:    	play_village(currentPlayer, state, handPos);
    #####:  687:    	return 0;
        -:  688:
        -:  689:    case minion:
    #####:  690:    	play_minion(currentPlayer, choice1, choice2, state, handPos);
    #####:  691:    	return 0;
        -:  692:
        -:  693:    case feast:
        -:  694:      //gain card with cost up to 5
        -:  695:      //Backup hand
    #####:  696:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  697:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  698:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  699:      }
        -:  700:      //Backup hand
        -:  701:
        -:  702:      //Update Coins for Buy
    #####:  703:      updateCoins(currentPlayer, state, 5);
    #####:  704:      x = 1;//Condition to loop on
    #####:  705:      while( x == 1) {//Buy one card
    #####:  706:	if (supplyCount(choice1, state) <= 0){
        -:  707:	  if (DEBUG)
        -:  708:	    printf("None of that card left, sorry!\n");
        -:  709:
        -:  710:	  if (DEBUG){
        -:  711:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  712:	  }
        -:  713:	}
    #####:  714:	else if (state->coins < getCost(choice1)){
    #####:  715:	  printf("That card is too expensive!\n");
        -:  716:
        -:  717:	  if (DEBUG){
        -:  718:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  719:	  }
        -:  720:	}
        -:  721:	else{
        -:  722:
        -:  723:	  if (DEBUG){
        -:  724:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  725:	  }
        -:  726:
    #####:  727:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  728:	  x = 0;//No more buying cards
        -:  729:
        -:  730:	  if (DEBUG){
        -:  731:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  732:	  }
        -:  733:
        -:  734:	}
        -:  735:      }     
        -:  736:
        -:  737:      //Reset Hand
    #####:  738:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  739:	state->hand[currentPlayer][i] = temphand[i];
    #####:  740:	temphand[i] = -1;
        -:  741:      }
        -:  742:      //Reset Hand
        -:  743:      			
    #####:  744:      return 0;
        -:  745:			
        -:  746:    case gardens:
    #####:  747:      return -1;
        -:  748:			
        -:  749:    case mine:
    #####:  750:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  751:
    #####:  752:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  753:	{
    #####:  754:	  return -1;
        -:  755:	}
        -:  756:		
    #####:  757:      if (choice2 > treasure_map || choice2 < curse)
        -:  758:	{
    #####:  759:	  return -1;
        -:  760:	}
        -:  761:
    #####:  762:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  763:	{
    #####:  764:	  return -1;
        -:  765:	}
        -:  766:
    #####:  767:      gainCard(choice2, state, 2, currentPlayer);
        -:  768:
        -:  769:      //discard card from hand
    #####:  770:      discardCard(handPos, currentPlayer, state, 0);
        -:  771:
        -:  772:      //discard trashed card
    #####:  773:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  774:	{
    #####:  775:	  if (state->hand[currentPlayer][i] == j)
        -:  776:	    {
    #####:  777:	      discardCard(i, currentPlayer, state, 0);			
    #####:  778:	      break;
        -:  779:	    }
        -:  780:	}
        -:  781:			
    #####:  782:      return 0;
        -:  783:			
        -:  784:    case remodel:
    #####:  785:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  786:
    #####:  787:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  788:	{
    #####:  789:	  return -1;
        -:  790:	}
        -:  791:
    #####:  792:      gainCard(choice2, state, 0, currentPlayer);
        -:  793:
        -:  794:      //discard card from hand
    #####:  795:      discardCard(handPos, currentPlayer, state, 0);
        -:  796:
        -:  797:      //discard trashed card
    #####:  798:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  799:	{
    #####:  800:	  if (state->hand[currentPlayer][i] == j)
        -:  801:	    {
    #####:  802:	      discardCard(i, currentPlayer, state, 0);			
    #####:  803:	      break;
        -:  804:	    }
        -:  805:	}
        -:  806:
        -:  807:
    #####:  808:      return 0;
        -:  809:		
        -:  810:    case baron:
    #####:  811:      state->numBuys++;//Increase buys by 1!
    #####:  812:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  813:	int p = 0;//Iterator for hand!
    #####:  814:	int card_not_discarded = 1;//Flag for discard set!
    #####:  815:	while(card_not_discarded){
    #####:  816:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  817:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  818:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  819:	    state->discardCount[currentPlayer]++;
    #####:  820:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  821:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  822:	    }
    #####:  823:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  824:	    state->handCount[currentPlayer]--;
    #####:  825:	    card_not_discarded = 0;//Exit the loop
        -:  826:	  }
    #####:  827:	  else if (p > state->handCount[currentPlayer]){
        -:  828:	    if(DEBUG) {
        -:  829:	      printf("No estate cards in your hand, invalid choice\n");
        -:  830:	      printf("Must gain an estate if there are any\n");
        -:  831:	    }
    #####:  832:	    if (supplyCount(estate, state) > 0){
    #####:  833:	      gainCard(estate, state, 0, currentPlayer);
    #####:  834:	      state->supplyCount[estate]--;//Decrement estates
    #####:  835:	      if (supplyCount(estate, state) == 0){
    #####:  836:		isGameOver(state);
        -:  837:	      }
        -:  838:	    }
    #####:  839:	    card_not_discarded = 0;//Exit the loop
        -:  840:	  }
        -:  841:			    
        -:  842:	  else{
    #####:  843:	    p++;//Next card
        -:  844:	  }
        -:  845:	}
        -:  846:      }
        -:  847:			    
        -:  848:      else{
    #####:  849:	if (supplyCount(estate, state) > 0){
    #####:  850:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  851:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  852:	  if (supplyCount(estate, state) == 0){
    #####:  853:	    isGameOver(state);
        -:  854:	  }
        -:  855:	}
        -:  856:      }
        -:  857:	    
        -:  858:      
    #####:  859:      return 0;
        -:  860:		
        -:  861:    case great_hall:
        -:  862:      //+1 Card
    #####:  863:      drawCard(currentPlayer, state);
        -:  864:			
        -:  865:      //+1 Actions
    #####:  866:      state->numActions++;
        -:  867:			
        -:  868:      //discard card from hand
    #####:  869:      discardCard(handPos, currentPlayer, state, 0);
    #####:  870:      return 0;
        -:  871:		
        -:  872:    case steward:
    #####:  873:      if (choice1 == 1)
        -:  874:	{
        -:  875:	  //+2 cards
    #####:  876:	  drawCard(currentPlayer, state);
    #####:  877:	  drawCard(currentPlayer, state);
        -:  878:	}
    #####:  879:      else if (choice1 == 2)
        -:  880:	{
        -:  881:	  //+2 coins
    #####:  882:	  state->coins = state->coins + 2;
        -:  883:	}
        -:  884:      else
        -:  885:	{
        -:  886:	  //trash 2 cards in hand
    #####:  887:	  discardCard(choice2, currentPlayer, state, 1);
    #####:  888:	  discardCard(choice3, currentPlayer, state, 1);
        -:  889:	}
        -:  890:			
        -:  891:      //discard card from hand
    #####:  892:      discardCard(handPos, currentPlayer, state, 0);
    #####:  893:      return 0;
        -:  894:		
        -:  895:    case tribute:
    #####:  896:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####:  897:	if (state->deckCount[nextPlayer] > 0){
    #####:  898:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  899:	  state->deckCount[nextPlayer]--;
        -:  900:	}
    #####:  901:	else if (state->discardCount[nextPlayer] > 0){
    #####:  902:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  903:	  state->discardCount[nextPlayer]--;
        -:  904:	}
        -:  905:	else{
        -:  906:	  //No Card to Reveal
        -:  907:	  if (DEBUG){
        -:  908:	    printf("No cards to reveal\n");
        -:  909:	  }
        -:  910:	}
        -:  911:      }
        -:  912:	    
        -:  913:      else{
    #####:  914:	if (state->deckCount[nextPlayer] == 0){
    #####:  915:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####:  916:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  917:	    state->deckCount[nextPlayer]++;
    #####:  918:	    state->discard[nextPlayer][i] = -1;
    #####:  919:	    state->discardCount[nextPlayer]--;
        -:  920:	  }
        -:  921:			    
    #####:  922:	  shuffle(nextPlayer,state);//Shuffle the deck
        -:  923:	} 
    #####:  924:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  925:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  926:	state->deckCount[nextPlayer]--;
    #####:  927:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  928:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  929:	state->deckCount[nextPlayer]--;
        -:  930:      }    
        -:  931:		       
    #####:  932:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####:  933:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  934:	state->playedCardCount++;
    #####:  935:	tributeRevealedCards[1] = -1;
        -:  936:      }
        -:  937:
    #####:  938:      for (i = 0; i <= 2; i ++){
    #####:  939:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####:  940:	  state->coins += 2;
        -:  941:	}
        -:  942:		    
    #####:  943:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####:  944:	  drawCard(currentPlayer, state);
    #####:  945:	  drawCard(currentPlayer, state);
        -:  946:	}
        -:  947:	else{//Action Card
    #####:  948:	  state->numActions = state->numActions + 2;
        -:  949:	}
        -:  950:      }
        -:  951:	    
    #####:  952:      return 0;
        -:  953:		
        -:  954:    case ambassador:
    #####:  955:      j = 0;		//used to check if player has enough cards to discard
        -:  956:
    #####:  957:      if (choice2 > 2 || choice2 < 0)
        -:  958:	{
    #####:  959:	  return -1;				
        -:  960:	}
        -:  961:
    #####:  962:      if (choice1 == handPos)
        -:  963:	{
    #####:  964:	  return -1;
        -:  965:	}
        -:  966:
    #####:  967:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  968:	{
    #####:  969:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -:  970:	    {
    #####:  971:	      j++;
        -:  972:	    }
        -:  973:	}
    #####:  974:      if (j < choice2)
        -:  975:	{
    #####:  976:	  return -1;				
        -:  977:	}
        -:  978:
        -:  979:      if (DEBUG) 
        -:  980:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  981:
        -:  982:      //increase supply count for choosen card by amount being discarded
    #####:  983:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -:  984:			
        -:  985:      //each other player gains a copy of revealed card
    #####:  986:      for (i = 0; i < state->numPlayers; i++)
        -:  987:	{
    #####:  988:	  if (i != currentPlayer)
        -:  989:	    {
    #####:  990:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -:  991:	    }
        -:  992:	}
        -:  993:
        -:  994:      //discard played card from hand
    #####:  995:      discardCard(handPos, currentPlayer, state, 0);			
        -:  996:
        -:  997:      //trash copies of cards returned to supply
    #####:  998:      for (j = 0; j < choice2; j++)
        -:  999:	{
    #####: 1000:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1001:	    {
    #####: 1002:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1003:		{
    #####: 1004:		  discardCard(i, currentPlayer, state, 1);
    #####: 1005:		  break;
        -: 1006:		}
        -: 1007:	    }
        -: 1008:	}			
        -: 1009:
    #####: 1010:      return 0;
        -: 1011:		
        -: 1012:    case cutpurse:
        -: 1013:
    #####: 1014:      updateCoins(currentPlayer, state, 2);
    #####: 1015:      for (i = 0; i < state->numPlayers; i++)
        -: 1016:	{
    #####: 1017:	  if (i != currentPlayer)
        -: 1018:	    {
    #####: 1019:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1020:		{
    #####: 1021:		  if (state->hand[i][j] == copper)
        -: 1022:		    {
    #####: 1023:		      discardCard(j, i, state, 0);
    #####: 1024:		      break;
        -: 1025:		    }
    #####: 1026:		  if (j == state->handCount[i])
        -: 1027:		    {
    #####: 1028:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1029:			{
        -: 1030:			  if (DEBUG)
        -: 1031:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1032:			}	
    #####: 1033:		      break;
        -: 1034:		    }		
        -: 1035:		}
        -: 1036:					
        -: 1037:	    }
        -: 1038:				
        -: 1039:	}				
        -: 1040:
        -: 1041:      //discard played card from hand
    #####: 1042:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1043:
    #####: 1044:      return 0;
        -: 1045:
        -: 1046:		
        -: 1047:    case embargo: 
        -: 1048:      //+2 Coins
    #####: 1049:      state->coins = state->coins + 2;
        -: 1050:			
        -: 1051:      //see if selected pile is in play
    #####: 1052:      if ( state->supplyCount[choice1] == -1 )
        -: 1053:	{
    #####: 1054:	  return -1;
        -: 1055:	}
        -: 1056:			
        -: 1057:      //add embargo token to selected supply pile
    #####: 1058:      state->embargoTokens[choice1]++;
        -: 1059:			
        -: 1060:      //trash card
    #####: 1061:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1062:      return 0;
        -: 1063:		
        -: 1064:    case outpost:
        -: 1065:      //set outpost flag
    #####: 1066:      state->outpostPlayed++;
        -: 1067:			
        -: 1068:      //discard card
    #####: 1069:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1070:      return 0;
        -: 1071:		
        -: 1072:    case salvager:
        -: 1073:      //+1 buy
    #####: 1074:      state->numBuys++;
        -: 1075:			
    #####: 1076:      if (choice1)
        -: 1077:	{
        -: 1078:	  //gain coins equal to trashed card
    #####: 1079:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1080:	  //trash card
    #####: 1081:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1082:	}
        -: 1083:			
        -: 1084:      //discard card
    #####: 1085:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1086:      return 0;
        -: 1087:		
        -: 1088:    case sea_hag:
    #####: 1089:      for (i = 0; i < state->numPlayers; i++){
    #####: 1090:	if (i != currentPlayer){
    #####: 1091:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1092:	  state->discardCount[i]++;
    #####: 1093:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1094:	}
        -: 1095:      }
    #####: 1096:      return 0;
        -: 1097:		
        -: 1098:    case treasure_map:
        -: 1099:      //search hand for another treasure_map
    #####: 1100:      index = -1;
    #####: 1101:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1102:	{
    #####: 1103:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1104:	    {
    #####: 1105:	      index = i;
    #####: 1106:	      break;
        -: 1107:	    }
        -: 1108:	}
    #####: 1109:      if (index > -1)
        -: 1110:	{
        -: 1111:	  //trash both treasure cards
    #####: 1112:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1113:	  discardCard(index, currentPlayer, state, 1);
        -: 1114:
        -: 1115:	  //gain 4 Gold cards
    #####: 1116:	  for (i = 0; i < 4; i++)
        -: 1117:	    {
    #####: 1118:	      gainCard(gold, state, 1, currentPlayer);
        -: 1119:	    }
        -: 1120:				
        -: 1121:	  //return success
    #####: 1122:	  return 1;
        -: 1123:	}
        -: 1124:			
        -: 1125:      //no second treasure_map found in hand
    #####: 1126:      return -1;
        -: 1127:    }
        -: 1128:	
    #####: 1129:  return -1;
        -: 1130:}
        -: 1131:
    #####: 1132:int play_adventurer(int currentPlayer, int drawntreasure, int cardDrawn, int temphand[MAX_HAND],
        -: 1133:		struct gameState *state) {
    #####: 1134:	  int z = 0;// this is the counter for the temp hand
        -: 1135:
    #####: 1136:      while(drawntreasure<2){
    #####: 1137:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####: 1138:	  shuffle(currentPlayer, state);
        -: 1139:	}
    #####: 1140:	drawCard(currentPlayer, state);
    #####: 1141:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####: 1142:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    #####: 1143:	  drawntreasure++;
        -: 1144:	else{
    #####: 1145:	  temphand[z]=cardDrawn;
    #####: 1146:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####: 1147:	  z++;
        -: 1148:	}
        -: 1149:      }
    #####: 1150:      while(z-1>=0){
    #####: 1151:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####: 1152:	z=z-1;
        -: 1153:      }
    #####: 1154:      return 0;
        -: 1155:}
        -: 1156:
    #####: 1157:int play_council_room(int currentPlayer, struct gameState *state, int handPos) {
        -: 1158:	int i;
        -: 1159:
        -: 1160:    //+4 Cards
    #####: 1161:    for (i = 0; i < 3; i++)
        -: 1162:	{
    #####: 1163:	  drawCard(currentPlayer, state);
        -: 1164:	}
        -: 1165:
        -: 1166:    //+1 Buy
    #####: 1167:    state->numBuys++;
        -: 1168:
        -: 1169:    //Each other player draws a card
    #####: 1170:    for (i = 0; i < state->numPlayers; i++)
        -: 1171:	{
    #####: 1172:	  if ( i != currentPlayer )
        -: 1173:	    {
    #####: 1174:	      drawCard(i, state);
        -: 1175:	    }
        -: 1176:	}
        -: 1177:
        -: 1178:    //put played card in played card pile
    #####: 1179:    discardCard(handPos, currentPlayer, state, 0);
        -: 1180:
    #####: 1181:    return 0;
        -: 1182:}
        -: 1183:
    #####: 1184:int play_smithy(int currentPlayer, struct gameState *state, int handPos) {
        -: 1185:	int i;
        -: 1186:
        -: 1187:    //+3 Cards
    #####: 1188:    for (i = 0; i < 3; i++)
        -: 1189:	{
    #####: 1190:	  drawCard(currentPlayer, state);
        -: 1191:	}
        -: 1192:
        -: 1193:    //discard card from hand
    #####: 1194:    discardCard(handPos, currentPlayer, state, 0);
    #####: 1195:    return 0;
        -: 1196:}
        -: 1197:
    #####: 1198:int play_village(int currentPlayer, struct gameState *state, int handPos) {
        -: 1199:    //+1 Card
    #####: 1200:    drawCard(currentPlayer, state);
        -: 1201:
        -: 1202:    //+2 Actions
    #####: 1203:    state->numActions = state->numActions + 2;
        -: 1204:
        -: 1205:    //discard played card from hand
    #####: 1206:    discardCard(handPos, currentPlayer, state, 0);
    #####: 1207:    return 0;
        -: 1208:}
        -: 1209:
    #####: 1210:int play_minion(int currentPlayer, int choice1, int choice2,
        -: 1211:		struct gameState *state, int handPos) {
        -: 1212:	int i;
        -: 1213:	int j;
        -: 1214:
        -: 1215:    //+1 action
    #####: 1216:    state->numActions++;
        -: 1217:
        -: 1218:    //discard card from hand
    #####: 1219:    discardCard(handPos, currentPlayer, state, 0);
        -: 1220:
    #####: 1221:    if (choice1)		//+2 coins
        -: 1222:	{
    #####: 1223:	  state->coins = state->coins + 2;
        -: 1224:	}
        -: 1225:
    #####: 1226:    else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -: 1227:	{
        -: 1228:	  //discard hand
    #####: 1229:	  while(numHandCards(state) > 0)
        -: 1230:	    {
    #####: 1231:	      discardCard(handPos, currentPlayer, state, 0);
        -: 1232:	    }
        -: 1233:
        -: 1234:	  //draw 4
    #####: 1235:	  for (i = 0; i < 4; i++)
        -: 1236:	    {
    #####: 1237:	      drawCard(currentPlayer, state);
        -: 1238:	    }
        -: 1239:
        -: 1240:	  //other players discard hand and redraw if hand size > 4
    #####: 1241:	  for (i = 0; i < state->numPlayers; i++)
        -: 1242:	    {
    #####: 1243:	      if (i != currentPlayer)
        -: 1244:		{
    #####: 1245:		  if ( state->handCount[i] > 4 )
        -: 1246:		    {
        -: 1247:		      //discard hand
    #####: 1248:		      while( state->handCount[i] > 0 )
        -: 1249:			{
    #####: 1250:			  discardCard(handPos, i, state, 0);
        -: 1251:			}
        -: 1252:
        -: 1253:		      //draw 4
    #####: 1254:		      for (j = 0; j < 4; j++)
        -: 1255:			{
    #####: 1256:			  drawCard(i, state);
        -: 1257:			}
        -: 1258:		    }
        -: 1259:		}
        -: 1260:	    }
        -: 1261:
        -: 1262:	}
    #####: 1263:    return 0;
        -: 1264:}
        -: 1265:
    #####: 1266:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1267:{
        -: 1268:	
        -: 1269:  //if card is not trashed, added to Played pile 
    #####: 1270:  if (trashFlag < 1)
        -: 1271:    {
        -: 1272:      //add card to played pile
    #####: 1273:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
    #####: 1274:      state->playedCardCount++;
        -: 1275:    }
        -: 1276:	
        -: 1277:  //set played card to -1
    #####: 1278:  state->hand[currentPlayer][handPos] = -1;
        -: 1279:	
        -: 1280:  //remove card from player's hand
    #####: 1281:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1282:    {
        -: 1283:      //reduce number of cards in hand
    #####: 1284:      state->handCount[currentPlayer]--;
        -: 1285:    }
    #####: 1286:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1287:    {
        -: 1288:      //reduce number of cards in hand
    #####: 1289:      state->handCount[currentPlayer]--;
        -: 1290:    }
        -: 1291:  else 	
        -: 1292:    {
        -: 1293:      //replace discarded card with last card in hand
    #####: 1294:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1295:      //set last card to -1
    #####: 1296:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1297:      //reduce number of cards in hand
    #####: 1298:      state->handCount[currentPlayer]--;
        -: 1299:    }
        -: 1300:	
    #####: 1301:  return 0;
        -: 1302:}
        -: 1303:
    #####: 1304:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1305:{
        -: 1306:  //Note: supplyPos is enum of choosen card
        -: 1307:	
        -: 1308:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1309:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1310:    {
    #####: 1311:      return -1;
        -: 1312:    }
        -: 1313:	
        -: 1314:  //added card for [whoseTurn] current player:
        -: 1315:  // toFlag = 0 : add to discard
        -: 1316:  // toFlag = 1 : add to deck
        -: 1317:  // toFlag = 2 : add to hand
        -: 1318:
    #####: 1319:  if (toFlag == 1)
        -: 1320:    {
    #####: 1321:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1322:      state->deckCount[player]++;
        -: 1323:    }
    #####: 1324:  else if (toFlag == 2)
        -: 1325:    {
    #####: 1326:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1327:      state->handCount[player]++;
        -: 1328:    }
        -: 1329:  else
        -: 1330:    {
    #####: 1331:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1332:      state->discardCount[player]++;
        -: 1333:    }
        -: 1334:	
        -: 1335:  //decrease number in supply pile
    #####: 1336:  state->supplyCount[supplyPos]--;
        -: 1337:	 
    #####: 1338:  return 0;
        -: 1339:}
        -: 1340:
    20045: 1341:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1342:{
        -: 1343:  int i;
        -: 1344:	
        -: 1345:  //reset coin count
    20045: 1346:  state->coins = 0;
        -: 1347:
        -: 1348:  //add coins for each Treasure card in player's hand
   120270: 1349:  for (i = 0; i < state->handCount[player]; i++)
        -: 1350:    {
   100225: 1351:      if (state->hand[player][i] == copper)
        -: 1352:	{
    80180: 1353:	  state->coins += 1;
        -: 1354:	}
    20045: 1355:      else if (state->hand[player][i] == silver)
        -: 1356:	{
    #####: 1357:	  state->coins += 2;
        -: 1358:	}
    20045: 1359:      else if (state->hand[player][i] == gold)
        -: 1360:	{
    #####: 1361:	  state->coins += 3;
        -: 1362:	}	
        -: 1363:    }	
        -: 1364:
        -: 1365:  //add bonus
    20045: 1366:  state->coins += bonus;
        -: 1367:
    20045: 1368:  return 0;
        -: 1369:}
        -: 1370:
        -: 1371:
        -: 1372://end of dominion.c
        -: 1373:
